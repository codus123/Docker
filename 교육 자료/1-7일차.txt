[환경변수 사용: -e]
docker run -d -e MYSQL_ROOT_PASSWORD=rootpass --name ms mysql
docker run -d -e MARIADB_ROOT_PASSWORD=rootpass --name md mariadb

docker exec -it md /bin/bash
$ mariadb -u root -p

환경변수를 사용해서 데이터 전달(-e 키=값): nginx
docker run -d --name nx -e env_name=mjc nginx
docker exec -it nx bash
printenv(환경변수 출력)
printenv env_name
= echo $env_name

[레이어]
pull: 이미지를 쪼개서 다운로드
이미 존재하는 레이어가 있다면 새로 다운로드 받을 필요가 없다
docker inspect 이미지이름
docker info
	도커의 루트 디렉터리: /var/lib/docker
		- containers, image, overlay2
	레이어의 실질적 저장위치: overlay2

[컨테이너 로그 확인]: docker logs
docker logs 컨테이너이름

docker search jenkins
docker pull jenkins/jenkins
docker inspect jenkins/jenkins | more
docker run -d -p 8080:8080 --name jk jenkins/jenkins

초기 패스워드 찾는 법
1. 로그 확인
   docker logs jk
2. 내부 쉘에서 확인
   docker exec -it jk cat /var/jenkins_home/secrets/initialAdminPassword

[파일 복사] - 컨테이너와 호스트 사이
도커 복사: docker cp 원본경로 복사본경로
	컨테이너 경로 지정 - 컨테이너이름:경로

톰캣으로 루트 디렉터리 복사
docker run -d -p 8080:8080 --name tc tomcat
echo KoreaFighting > kr.txt
docker cp kr.txt tc:/
docker exec -it tc cat /kr.txt
docker cp tc:/kr.txt ./kr2.txt

아파치 홈페이지 복사
/usr/local/apache2/htdocs

docker run -d -p 80:80 --name apa httpd

nano index.html
<html><body>
<h1>취업률 100% 성공 달성</h1>
</body></html>

docker cp index.html apa:/usr/local/apache2/htdocs

nginx 홈페이지 복사
/usr/share/nginx/html
docker run -d -p 88:80 --name nx nginx

docker cp index.html nx:/usr/share/nginx/html

[볼륨 마운트]
docker run -v 호스트경로:컨테이너경로:권한

권한의 종류
 ro: 읽기 전용
 rw: 읽기 및 쓰기

nginx 볼륨 마운트
docker run -d -p 80:80 --name nx -v /home/ubuntu/test:/usr/share/nginx/html:ro nginx 

apache 볼륨 마운트
docker run -d -p 80:80 --name apa -v /home/ubuntu/test:/usr/local/apache2/htdocs httpd

텍스트 브라우저: lynx, elinks, curl

[컨테이너로 이미지 만들기]
1. commit 명령어
   docker commit 컨테이너이름 이미지이름
2. Docker 스크립트(Dockerfile)
   docker build -t 이미지이름 파일위치

docker run --name deb -d debian
docker commit deb mjc-deb
docker images

docker run -d --name apa httpd
docker commit apa mjc-apa

Dockerfile 파일 생성시
1. 폴더를 새로 만든다.
2. 해당 폴더에서 Dockerfile를 만든다.
3. docker build -t 만들이미지명 .

vi Dockerfile
FROM nginx
COPY index.html /usr/share/nginx/html

docker build -t test_nx .

[도커 이미지 옮기는 방법]
docker image save 이미지명 > 이미지명.tar
tar xvf 이미지명.tar		(불필요)
docker image load < 이미지명.tar

docker image save httpd > httpd.tar
docker rm -f `docker ps -aq`
docker rmi httpd
docker images
docker image load < httpd.tar
====
도커 허브 등록 및 로그인(hub.docker.com)
docker login
docker logout

도커 레지스트리: 이미지를 배포하는 곳
도커 허브: 도커 제작자가 운영하는 공식 도커 레지스트리
리포지토리: 레지스트리를 구성하는 단위
	보통 소프트웨어를 단위
	도커 허브는 리포지토리가 각각의 ID를 갖게 되어있다
이미지 업로드(도커 허브, 사설 레지스트리)
	이미지에 태그를 부여해야 한다.
이미지에 태그 부여 방법
docker tag 이미지이름 계정명/이미지이름
docker push 계정명/이미지이름

docker tag nginx idokebi/nginx
docker push idokebi/nginx

docker tag httpd idokebi/httpd
docker push idokebi/httpd
=====
사설 레지스트리 만들기
docker run -d --name docker-registry -p 5000:5000 registry

사설 레지스트리 확인
localhost:5000/v2

사설 레지스트리에 이미지 업로드(Push)
docker tag 이미지이름 127.0.0.1:5000/이미지이름
사설 레지스트리에 이미지 업로드
docker push 127.0.0.1:5000/이미지이름
사설 레지스트리에서 이미지 다운로드
docker pull 127.0.0.1:5000/이미지이름

docker tag httpd 127.0.0.1:5000/httpd
docker push 127.0.0.1:5000/httpd
docker pull 127.0.0.1:5000/httpd

클라우드 관련 파일 - YAML(.yaml, .yml), JSON 

sudo apt install docker-compose
docker-compose -version

도커 컴포즈 설치
apt install -y python3 python3-pip
pip3 install docker-compose
docker-compose -version

restart: 컨테이너 종료시 재시작 여부를 결정
	no: 재시작 안함
	always: 항상 재시작
	on-failure: 프로세스 0 이외 상태 종료시 재시작
	unless-stopped: 종료시 재시작하지 않음. 다만 그외는 재시작
------
컴포즈 파일 실행
docker-compose -f 경로/docker-compose.yml up 옵션
컨테이너 종료
docker-compose -f 경로/docker-compose.yml down
	컨테이너만 종료, 이미지와 볼륨은 삭제 안됨

version: "3"
services:
  apa:
    image: httpd
    ports:
      - 8080:80
    restart: always

mkdir apa
cd apa
nano docker-compose.yml
컴포즈 파일 실행
docker-compose -f docker-compose.yml up -d
docker ps
컨테이너 종료
docker-compose -f docker-compose.yml down















































